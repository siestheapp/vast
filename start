#!/usr/bin/env bash
set -euo pipefail

# Start VAST: ensure Docker + Postgres (pagila) on 5433, venv deps, then run app.

# Resolve script directory even when invoked via symlink
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do
  DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ "$SOURCE" != /* ]] && SOURCE="$DIR/$SOURCE"
done
PROJECT_DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
cd "$PROJECT_DIR"

echo "[start] Project: $PROJECT_DIR"

if [ ! -f .env ]; then
  echo "[start] WARNING: .env not found. Create one or copy from .env.example"
fi

ensure_docker() {
  if docker info >/dev/null 2>&1; then
    return 0
  fi
  # Try to start Docker Desktop on macOS
  if command -v open >/dev/null 2>&1; then
    echo "[start] Starting Docker Desktop..."
    open -g -a Docker || true
  fi
  echo -n "[start] Waiting for Docker daemon";
  for i in $(seq 1 60); do
    if docker info >/dev/null 2>&1; then echo " ready"; return 0; fi
    echo -n "."; sleep 2
  done
  echo
  echo "[start] ERROR: Docker daemon not available. Please start Docker Desktop."
  exit 1
}

ensure_container() {
  local name="vast-pg"
  local exists
  exists=$(docker ps -a --format '{{.Names}}' | grep -w "$name" || true)
  if [ -n "$exists" ]; then
    # If not running, start it
    local running
    running=$(docker ps --format '{{.Names}}' | grep -w "$name" || true)
    if [ -z "$running" ]; then
      echo "[start] Starting existing container $name..."
      docker start "$name" >/dev/null
    else
      echo "[start] Container $name already running."
    fi
  else
    echo "[start] Creating postgres:16 container $name (port 5433 -> 5432) with Pagila seed..."
    docker run --name "$name" \
      -e POSTGRES_USER=vast_ro \
      -e POSTGRES_PASSWORD=vast_ro_pwd \
      -e POSTGRES_DB=pagila \
      -p 5433:5432 \
      -v "$PWD/pagila-schema.sql":/docker-entrypoint-initdb.d/01-schema.sql \
      -v "$PWD/pagila-data.sql":/docker-entrypoint-initdb.d/02-data.sql \
      -d postgres:16 >/dev/null
  fi

  echo -n "[start] Waiting for Postgres (pagila) to become ready";
  for i in $(seq 1 90); do
    if docker exec "$name" pg_isready -U vast_ro -d pagila >/dev/null 2>&1; then
      echo " ready"; return 0; fi
    echo -n "."; sleep 2
  done
  echo
  echo "[start] ERROR: Postgres did not become ready in time. Check container logs: docker logs $name"
  exit 1
}

ensure_venv() {
  if [ ! -d .venv ]; then
    echo "[start] Creating virtualenv (.venv)..."
    python3 -m venv .venv
  fi
  # shellcheck disable=SC1091
  source .venv/bin/activate
  python -m pip install -U pip setuptools wheel >/dev/null
  local hash_file=".venv/.vast-req.hash"
  local req_hash=""
  if [ -f requirements.txt ]; then
    req_hash=$(python3 - <<'PY'
import hashlib, sys
from pathlib import Path
path = Path('requirements.txt')
print(hashlib.sha256(path.read_bytes()).hexdigest())
PY
)
  fi

  local installed_hash=""
  if [ -f "$hash_file" ]; then
    installed_hash=$(cat "$hash_file")
  fi

  if [ -n "$req_hash" ]; then
    if [ "$req_hash" != "$installed_hash" ]; then
      echo "[start] Installing dependencies (requirements changed)..."
      pip install -r requirements.txt >/dev/null
      echo "$req_hash" > "$hash_file"
    else
      echo "[start] Dependencies already satisfied (requirements unchanged)."
    fi
  fi
}

print_receipt() {
  echo ""
  echo "[start] âœ… Environment ready"
  echo "- Docker: $(docker version --format '{{.Server.Version}}' 2>/dev/null || echo 'unknown')"
  echo "- Container: vast-pg (port 5433 -> 5432)"
  echo "- Python: $(python -V 2>&1)"
  echo "- VAST entry: start_vast.py"
  echo ""
}

ensure_docker
ensure_container
ensure_venv
print_receipt

ensure_node() {
  if ! command -v npm >/dev/null 2>&1; then
    echo "[start] ERROR: npm is not installed. Please install Node.js (https://nodejs.org)"
    exit 1
  fi
}

ensure_electron_deps() {
  if [ ! -d "desktop/electron/node_modules" ]; then
    echo "[start] Installing Electron dependencies (desktop/electron)..."
    if ! npm --prefix desktop/electron ci >/dev/null 2>&1; then
      echo "[start] Falling back to npm install..."
      npm --prefix desktop/electron install >/dev/null
    fi
  fi
}

start_api() {
  local host="127.0.0.1"
  local port="${API_PORT:-8000}"
  echo "[start] Starting API on http://${host}:${port} ..."
  # Use uvicorn inside venv
  uvicorn src.vast.api:app --host "$host" --port "$port" --reload &
  API_PID=$!
}

wait_for_api() {
  local host="127.0.0.1"
  local port="${API_PORT:-8000}"
  echo -n "[start] Waiting for API healthcheck";
  for i in $(seq 1 60); do
    if curl -sSf "http://${host}:${port}/health" >/dev/null 2>&1; then echo " ready"; return 0; fi
    echo -n "."; sleep 1
  done
  echo
  echo "[start] ERROR: API did not become ready on ${host}:${port}"
  exit 1
}

start_electron() {
  echo "[start] Launching Electron app..."
  npm --prefix desktop/electron start &
  ELECTRON_PID=$!
}

cleanup() {
  local code=$?
  echo "\n[start] Shutting down..."
  if [ -n "${ELECTRON_PID:-}" ] && ps -p "$ELECTRON_PID" >/dev/null 2>&1; then
    kill "$ELECTRON_PID" >/dev/null 2>&1 || true
    wait "$ELECTRON_PID" 2>/dev/null || true
  fi
  if [ -n "${API_PID:-}" ] && ps -p "$API_PID" >/dev/null 2>&1; then
    kill "$API_PID" >/dev/null 2>&1 || true
    wait "$API_PID" 2>/dev/null || true
  fi
  exit $code
}

trap cleanup TERM EXIT

echo "[start] Launching VAST stack (API + Electron + CLI). Use 'exit' in CLI to quit."

ensure_node
ensure_electron_deps
start_api
wait_for_api
start_electron

# Run CLI in the foreground. When it exits, cleanup trap will run.
echo "[start] Launching CLI..."
python start_vast.py


